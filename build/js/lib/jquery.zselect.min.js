/*!
 * Custom select plugin for jQuery (zselect v0.2.0 beta)
 *
 * Author: Maxim Popov <Popov@bluefountainmedia.com>
 *
 * Date: 25/11/2014
 * Depends on library: jQuery 1.9+
 *
 */
(function($, undefined) {
    'use strict';
    var touch_enable = (('ontouchstart' in window) || (navigator.MaxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)),
        callbacks,
        check_prototype = typeof Prototype !== 'undefined';

    // adaptation for prototype
    if (check_prototype) {
        (function(){
            var eventMatchers = {
                    'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
                    'MouseEvents': /^(?:click|mouse(?:down|up|over|move|out))$/
                },
                defaultOptions = {
                    pointerX: 0,
                    pointerY: 0,
                    button: 0,
                    ctrlKey: false,
                    altKey: false,
                    shiftKey: false,
                    metaKey: false,
                    bubbles: true,
                    cancelable: true
                };

            Event.simulate = function(element, eventName) {
                var options = Object.extend(defaultOptions, arguments[2] || { }),
                    oEvent, eventType = null, name;

                element = window.$(element);

                for (name in eventMatchers) {
                    if (eventMatchers[name].test(eventName)) {
                        eventType = name;
                        break;
                    }
                }

                if (!eventType){
                    throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');
                }

                if (document.createEvent) {
                    oEvent = document.createEvent(eventType);
                    if (eventType == 'HTMLEvents') {
                        oEvent.initEvent(eventName, options.bubbles, options.cancelable);
                    } else {
                        oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView,
                            options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,
                            options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
                    }
                    element.dispatchEvent(oEvent);
                } else {
                    options.clientX = options.pointerX;
                    options.clientY = options.pointerY;
                    oEvent = Object.extend(document.createEventObject(), options);
                    element.fireEvent('on' + eventName, oEvent);
                }
                return element;
            };
            Element.addMethods({ simulate: Event.simulate });
        })()
    }

    function Zs(element, options) {
        var $option_placeholder;

        this.$select = $(element);

        this.options = $.extend(true, {}, Zs.defaults, options);

        this.zs_elements = {
            $wrapper    : false,
            $select_text: false,
            $select_btn : false,
            $select     : false,
            $drop       : false,
            $drop_items : false,
            $placeholder: false
        };

        this.current = {
            $drop_item  : false,
            $option     : false
        };
        this.focus_items = {
            $drop_items : false,
            $options    : false,
            $option     : false
        };
        if (this.$select.attr('multiple')) {
            this.multiple = true;
            this.current.$drop_item_point = false;
            this.current.$option_point    = false;
            this.current.$option_focus    = false;
        } else {
            this.multiple = false;
        }

        this.$options            = this.$select.find('option');
        $option_placeholder      = this.$options.filter('[value="' + this.options.placeholder.value + '"]');
        this.$option_placeholder = $option_placeholder.length ? $option_placeholder : false;
        if (this.options.native_menu && !this.multiple) {
            $option_placeholder.data('zs_data', {
                is_placeholder  : true
            });
        }

        this.ready = {
            select  : false,
            drop    : false
        };

        this.is_change_locked = false;

        this.is_open   = false;

        this.in_focus  = false;

        this.is_enable = true;

        this.orig_id   = this.$select.attr('id');

        this.lazy_timer_id = false;

        this.select_id = new Date().getTime() + this.utilities.getRandomInt(0, 500);

        this.plugins = {};
        $.each(Zs.Plugins, $.proxy(function(key, plugin) {
            this.plugins[key[0].toLowerCase() + key.slice(1)]
                = new plugin(this);
        }, this));

        this._addTriggerableEvents();
        this.init();
    }

    // options
    Zs.defaults = {
        width           : true,                                                     // zselect width (true, false, fixed number)
        hide_using_js   : false,                                                    // how to hide zselect (true, false)
        templates: {                                                                // zselect elements templates, don`t use characters before '<' http://stage.jquery.com/upgrade-guide/1.9/#jquery-htmlstring-versus-jquery-selectorstring
            select      : '<div class="zs-text"></div>',                            // select elements, you can also add element (<div class="zs-btn"></div>)
            drop        : '<div class="zs-drop">{{items}}</div>',                   // drop menu
            drop_item   : '<div class="zs-drop-item">{{text}}</div>',               // drop menu item
            origin_first: true                                                      // insert original select as first element in wrapper
        },
        buildSelectText   : false,                                                  // function for build select text
        buildDropItemText : false,                                                  // function for build each drop item from option
        lazy: {
            items : 1000,                                                           // how many in one iteration progressive loading
            time  : 100,                                                            // time between iterations
            text  : 'Loading...'                                                    // text before all drop items load
        },
        placeholder     : {
            value: '',                                                              // Placeholder option value detect
            no_options: 'No items selected'                                         // Placeholder option value detect
        },
        multiple        : {                                                         // multiple options
            height: true,                                                           // height of elements wrapper
            drop  : false                                                           // use multiple with in menu
        },
        native_menu     : false,                                                    // don`t create custom drop menu
        open_top        : true                                                      // turn on open drop down to top
    };

    // callbacks
    callbacks = {
        initBefore: false,      // before initialization
        initAfter : false,      // after initialization
        dropItemBefore: false,  // before drop item build
        dropItemAfter : false,  // after drop item build
        buildAfter: false,      // after build DOM of zselect
        openAfter : false,      // after drop menu open
        closeAfter: false,      // after drop menu close
        disableItemAfter: false,// after disable Item
        enableItemAfter : false,// after enable Item
        setItemAfter  : false   // after set Item
    };

    Zs.Plugins = {};

    Zs.prototype.zs = '0.2.0';

    Zs.prototype.utilities = {
        $window     : $(window),
        $document   : $(document),
        touch_enable: touch_enable,
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        },
        getRandomInt: function(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
    };

    Zs.prototype.init = function() {
        this.trigger('initBefore');

        // build zselect DOM
        this._buildDom();

        // add events
        this._eventsInit();

        // hide select
        if (this.options.hide_using_js &&
            !this.options.native_menu) {
            this.$select.hide();
        }

        if (this.$select.attr('disabled')) {
            this.trigger('disable');
        }
        this.trigger('initAfter');
    };

    Zs.prototype._buildDom = function() {
        this._buildDomWrapper();
        if ((this.options.native_menu && !this.multiple) ||
            (this.options.native_menu && this.multiple &&
                this.options.multiple.drop && this.utilities.touch_enable)) {

        } else {
            this._buildDomDrop();
        }
        if (!this.multiple || (this.multiple && this.options.multiple.drop)) {
            this._buildDomSelect();
        }
        this.trigger('buildAfter');
    };

    Zs.prototype._buildDomWrapper = function() {
        var $wrapper      = $('<div class="zs"></div>'),
            my_name       = this.$select.attr('name'),
            orig_classes  = this.$select.attr('class'),
            tabindex      = this.$select.attr('tabindex'),
            select_styles = this.$select.attr('style'),
            class_arr;

        this.zs_elements.$wrapper = $wrapper;

        // set select attributes
        if (this.orig_id) {
            $wrapper.attr('id', this.orig_id + '-zs');
        }
        if (my_name) {
            $wrapper.attr('data-name', my_name);
        }
        if (orig_classes) {
            class_arr = $.trim(orig_classes).split(' ');
            $.each(class_arr, function(id) {
                class_arr[id] += '-zs';
            });
            $wrapper.addClass(class_arr.join(' '));
        }
        if (select_styles) {
            $wrapper.attr('style', select_styles);
        }
        if (tabindex) {
            $wrapper.attr('tabindex', tabindex);
        } else {
            $wrapper.attr('tabindex', 0);
        }
        this.$select.attr({
            tabindex: -1
        });

        // set select width
        if (this.options.width !== false) {
            $wrapper.width(
                (this.options.width === true) ?
                    this.$select.outerWidth(true) :
                    this.options.width
            );
        }

        if ((this.options.native_menu && !this.multiple) ||
            (this.options.native_menu && this.multiple &&
                this.options.multiple.drop && this.utilities.touch_enable)) {
            $wrapper.addClass('zs-native-menu');
        }

        if (this.multiple) {
            $wrapper.addClass('zs-multiple');
        }

        if (this.options.multiple.drop) {
            $wrapper.addClass('zs-multiple-drop');
        }

        if (this.utilities.touch_enable) {
            $wrapper.addClass('zs-touch');
        }

        // insert wrapper
        $wrapper.insertAfter(this.$select)
            .append(this.$select);
    };

    Zs.prototype._buildDomSelect = function() {
        var template = (typeof this.options.templates.select === 'function') ?
                this.options.templates.select(this.$select) :
                this.options.templates.select,
            $select  = $('<div></div>').append(template),
            $zs_text= $select.find('.zs-text'),
            $zs_btn = $select.find('.zs-btn');

        if ($zs_text.length) {
            this.zs_elements.$select_text = $zs_text;
        }
        if ($zs_btn.length) {
            this.zs_elements.$select_btn  = $zs_btn;
        }

        if (!this.options.native_menu && this.ready.drop) {
            this.trigger('setItem');
        }
        if (this.options.native_menu) {
            this.trigger('setItem');
        }
        if (!this.options.native_menu &&
            !this.ready.drop &&
            this.zs_elements.$select_text) {
            this.zs_elements.$select_text.text(this.options.lazy.text);
        }

        this.ready.select = true;

        if (this.options.templates.origin_first) {
            this.zs_elements.$select = $select.insertAfter(this.$select);
        } else {
            this.zs_elements.$select = $select.prependTo(this.zs_elements.$wrapper);
        }
        this.zs_elements.$select
            .contents()
            .unwrap();
    };

    Zs.prototype._buildDomDrop = function() {
        var drop_html = (typeof this.options.templates.drop === 'function') ?
                this.options.templates.drop(this.$select) : this.options.templates.drop,
            tmp_id    = 'tmp' + new Date().getTime() + '-' + this.utilities.getRandomInt(0, 1000),
            $drop_wr  = $('<div></div>').append(
                drop_html.replace('{{items}}', '<span id="' + tmp_id + '"></span>')
            ),
            $tmp_drop_inner = $drop_wr.find('#' + tmp_id);

        this._buildDropItemsAll($tmp_drop_inner);

        this.zs_elements.$drop = $drop_wr.find('.zs-drop');

        if (this.multiple && !this.options.multiple.drop) {
            this.zs_elements.$drop.attr({
                tabindex: -1
            });
        }

        if (this.options.templates.origin_first) {
            $drop_wr.insertAfter(this.$select)
        } else {
            $drop_wr.insertBefore(this.$select)
        }
        $drop_wr
            .contents()
            .unwrap();

        if (this.multiple) {
            if (this.options.multiple.height === true &&
                !$.isNumeric(this.options.multiple.height)) {
                this.zs_elements.$drop.height(this.$select.outerHeight());
            }
            if (this.options.multiple.height !== true &&
                $.isNumeric(this.options.multiple.height)) {
                this.zs_elements.$drop.height(this.options.multiple.height);
            }
        }
        $tmp_drop_inner.remove();
    };

    Zs.prototype._buildDomDropItem = function($option) {
        this.trigger('dropItemBefore', $option);

        var text    = $option.text(),
            $result = $(this.options.templates.drop_item.replace(
                '{{text}}',
                typeof this.options.buildDropItemText === 'function' ?
                    this.options.buildDropItemText($option) :
                    text
            )),
            value   = $option.attr('value'),
            my_id   = $option.attr('id'),
            title      = $option.attr('title'),
            selected   = $option.attr('selected'),
            disabled   = $option.attr('disabled'),
            orig_class = $option.attr('class'),
            attributes = {},
            classes    = [],
            $my_dropitem;

        if (value) {
            attributes['data-value'] = value;
        }
        if (my_id) {
            attributes['id'] = my_id + '-zs-drop-item';
        }
        if (title) {
            attributes['title'] = title;
        }
        if (selected) {
            classes.push('zs-active');
        }
        if (orig_class) {
            classes.push(orig_class);
        }

        $my_dropitem = $('<div></div>').append($result)
            .find('.zs-drop-item')
            .attr(attributes)
            .addClass(classes.join(' '));

        if (disabled) {
            $my_dropitem
                .data('zs_data', {
                    enable: false
                });
            $option.data('zs_data', {
                enable: false
            });
        } else {
            $my_dropitem
                .data('zs_data', {
                    enable: true
                });
            $option.data('zs_data', {
                enable: true
            });
        }

        this.trigger('dropItemAfter', $option, $result);
        return $result;
    };

    Zs.prototype.addItem = function(ev, option, data) {

    };

    Zs.prototype._buildDropItemsAll = function($hook) {
        var that        = this,
            $hook_item  = $hook,
            $temp_optgroup      = false,
            $temp_dropoptgroup  = false,
            $temp_optgroup_data = {},
            item_count_now   = 0,   // counter increase by each item
            item_count_group = 1;   // counter increase by option -> lazy.items

        that.zs_elements.$drop_items = $();

        function lazyLoad() {
            that.$options.filter(function(id) {
                return id >= item_count_now;
            })
                .each(function() {
                    // check if lots of options
                    item_count_now += 1;
                    if (item_count_now > that.options.lazy.items * item_count_group) {
                        item_count_group += 1;
                        item_count_now   -= 1;
                        that.lazy_timer_id = setTimeout(function() {
                            if (that.lazy_timer_id !== false) {
                                clearTimeout(that.lazy_timer_id);
                                that.lazy_timer_id = false;
                            }
                            lazyLoad();
                        }, that.options.lazy.time);
                        return false;
                    }

                    // build item
                    var $self  = $(this),
                        value  = $self.attr('value'),
                        is_placeholder = false,
                        $my_optgroup = $self.closest('optgroup'),
                        $result_item, $temp_el, $temp_wrap, $drop_item,
                        option_data, option_data_old, dropitem_data, dropitem_data_old;

                    if (typeof that.options.templates.drop_item === 'function') {
                        $result_item = that.options.templates.drop_item($self[0]);
                    } else {
                        $result_item = that._buildDomDropItem($self);
                    }

                    $temp_wrap = $('<div></div>');
                    $drop_item = $temp_wrap.append($result_item)
                        .find('.zs-drop-item');

                    if ($result_item && typeof $result_item.insertAfter === 'function') {
                        $temp_wrap.insertAfter($hook_item);
                    }

                    // check for placeholder
                    if (value !== undefined && value === that.options.placeholder.value) {
                        if (that.zs_elements.$placeholder) {
                            that.zs_elements.$placeholder = that.zs_elements.$placeholder.add($drop_item);
                        } else {
                            that.zs_elements.$placeholder = $drop_item;
                        }
                        $drop_item.addClass('zs-drop-placeholder');
                        is_placeholder = true;
                    }

                    // set data && optgroup
                    option_data = {
                        $drop_item      : $drop_item,
                        $option_element : $result_item,
                        is_placeholder  : is_placeholder,
                        enable          : true
                    };
                    option_data_old = $self.data('zs_data') || {};
                    dropitem_data = {
                        $option         : $self,
                        $option_element : $result_item,
                        is_placeholder  : is_placeholder,
                        enable          : true
                    };
                    dropitem_data_old = $drop_item.data('zs_data') || {};

                    if ($my_optgroup.length) {
                        if (!$temp_optgroup || $my_optgroup[0] !== $temp_optgroup[0]) {
                            $temp_optgroup = $my_optgroup;
                            $temp_optgroup_data.label    = $temp_optgroup.attr('label') || '';
                            $temp_optgroup_data.disabled = $temp_optgroup.attr('disabled') || false;
                            $temp_optgroup_data.classes  = $temp_optgroup.attr('class') || '';
                            if ($temp_optgroup_data.disabled) {
                                $temp_optgroup_data.classes += ' zs-drop-disabled';
                            }
                            $temp_dropoptgroup = $('<div class="zs-drop-optgroup">' + $temp_optgroup_data.label + '</div>')
                                .insertBefore($temp_wrap)
                                .attr('data-label', $temp_optgroup_data.label)
                                .addClass($temp_optgroup_data.classes);
                        }
                        dropitem_data.$drop_optgroup = $temp_dropoptgroup;
                        option_data.$optgroup        = $temp_optgroup;
                        if ($temp_optgroup_data.disabled) {
                            option_data_old.enable = false;
                        }
                        $drop_item.addClass('zs-drop-inoptgroup');
                    }
                    if (option_data_old) {
                        $self.data('zs_data', $.extend(option_data, option_data_old));
                    } else {
                        $self.data('zs_data', option_data);
                    }
                    if (dropitem_data_old) {
                        $drop_item.data('zs_data', $.extend(dropitem_data, dropitem_data_old));
                    } else {
                        $drop_item.data('zs_data', dropitem_data);
                    }

                    // disable
                    if (option_data_old && !option_data_old.enable) {
                        that.trigger('disableItem', $self);
                    }

                    // init drop item events
                    that._eventsDropItem($drop_item, $self);

                    $temp_el = that.zs_elements.$drop_items;
                    that.zs_elements.$drop_items = $temp_el.add($drop_item);

                    if ($hook_item[0] !== $hook[0]) {
                        $hook_item.contents().unwrap();
                    }
                    $hook_item = $temp_wrap;

                    if (!this.multiple &&
                        item_count_now === that.$options.length) {
                        that.ready.drop = true;
                    }
                    if (item_count_now === that.$options.length) {
                        $hook_item.contents().unwrap();
                    }
                    if (item_count_now === that.$options.length &&
                        (that.ready.select || that.multiple)) {
                        that.trigger('setItem');
                    }
                });
        }

        lazyLoad();
    };

    Zs.prototype.disableItem = function(ev, zs, option) {
        if (!option) {
            return;
        }
        var $options = this.$options
            .filter(option)
            .each(function() {
                var $self = $(this),
                    my_data = $self.data('zs_data'),
                    drop_data;

                if (my_data) {
                    my_data.enable = false;
                    $self
                        .attr('disabled', true)
                        .data('zs_data', my_data);
                    drop_data = my_data.$drop_item.data('zs_data');
                    drop_data.enable = false;
                    my_data.$drop_item
                        .addClass('zs-drop-disabled')
                        .data('zs_data', drop_data);
                }
            });

        this.trigger('disableItemAfter', $options);
    };

    Zs.prototype.enableItem = function(ev, zs, option) {
        if (!option) {
            return;
        }
        var $options = this.$options
            .filter(option)
            .each(function() {
                var $self = $(this),
                    my_data = $self.data('zs_data'),
                    drop_data;

                if (my_data) {
                    my_data.enable = true;
                    $self
                        .removeAttr('disabled', true)
                        .data('zs_data', my_data);
                    drop_data = my_data.$drop_item.data('zs_data');
                    drop_data.enable = true;
                    my_data.$drop_item
                        .removeClass('zs-drop-disabled')
                        .data('zs_data', drop_data);
                }
            });


        this.trigger('enableItemAfter', $options);
    };

    // add triggerable events
    Zs.prototype._addTriggerableEvents = function() {
        var that = this;

        this._triggerableEvents = {
            addItem : this.addItem,
            setItem : this.setItem,
            setPrev : this.setPrev,
            setNext : this.setNext,
            disableItem : this.disableItem,
            enableItem  : this.enableItem,
            open    : this.open,
            close   : this.close,
            refresh : this.refresh,
            enable  : this.enable,
            disable : this.disable,
            destroy : this.destroy
        };

        $.each(this._triggerableEvents, $.proxy(function(event, callback) {
            var event_opt = 'on' + (event[0].toUpperCase() + event.slice(1));

            //this.$select.on(event + '.zselect', $.proxy(callback, this));
            this.$select.on(event + '.zselect', function() {
                var my_arguments = $.makeArray(arguments);
                if (my_arguments[1] && !my_arguments[1].zs) {
                    my_arguments.splice(1, 0, that);
                }
                if (my_arguments.length === 1) {
                    my_arguments.push(that);
                }
                if (typeof that.options[event_opt] === 'function') {
                    that.options[event_opt].apply(that, my_arguments);
                }
                $.proxy(callback, that).apply(that, my_arguments);
            });
        }, this));
    };

    // trigger events
    Zs.prototype.trigger = function(ev) {
        if (!ev) {
            return;
        }
        var event_opt    = 'on' + (ev[0].toUpperCase() + ev.slice(1)),
            my_arguments = [].slice.call(arguments, 1);

        my_arguments.unshift(this);

        this.$select.trigger(ev + '.zselect', my_arguments);

        if (!this._triggerableEvents[ev] && typeof this.options[event_opt] === 'function') {
            my_arguments.unshift(
                $.Event(ev + '.zselect', {
                    relatedTarget: this,
                    currentTarget: this.$select
                })
            );
            this.options[event_opt].apply(this.$select, my_arguments);
        }
    };

    Zs.prototype._eventsInit = function() {
        var that       = this,
            doc_events = {};

        // add service functions to the standard events of select
        $.each({
            'change.zselect': function(e, $option, set_data) {
                if (!that.is_change_locked) {
                    that.trigger('setItem');
                }
            }
        }, $.proxy(function(event, callback) {
            this.$select.on(event, $.proxy(callback, this));
        }, this));

        // init zselect wrapper events
        this._eventsWrapper();

        // init zselect buttons events
        if ((this.zs_elements.$select_text && this.zs_elements.$select_text.length)
            || (this.zs_elements.$select_btn && this.zs_elements.$select_btn.length)) {
            this._eventsBtnsInit();
        }

        // document events
        if (!this.multiple || (this.multiple && this.options.multiple.drop)) {
            if (this.utilities.touch_enable && $.Finger) {
                doc_events['tap.zselect' + this.select_id] = function(e) {
                    if (!that.is_open) {
                        return;
                    }
                    if (!$(e.target).closest(that.zs_elements.$wrapper).length) {
                        that.trigger('close');
                    }
                };
            } else {
                doc_events['mousedown.zselect' + this.select_id] = function(e) {
                    if (!that.is_open) {
                        return;
                    }
                    if (!$(e.target).closest(that.zs_elements.$wrapper).length) {
                        that.trigger('close');
                    }
                };
            }
            this.utilities.$document.on(doc_events);
        }
    };

    Zs.prototype._eventsFilterItems = function(character) {
        var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
            regex = new RegExp( "^" + escapedCharacter, "i" );

        return this.$options.filter(function() {
            return regex.test(
                $.trim($(this).text())
            );
        });
    };

    Zs.prototype._eventsWrapper = function() {
        var that = this,
            wrapper_events = {
                focusin: function() {
                    if (!that.in_focus) {
                        that.zs_elements.$wrapper.addClass('zs-focus');
                        that.zs_elements.$wrapper.parent().addClass('zs-focus');
                        that.in_focus = true;
                    }
                },
                blur: function() {
                    if (that.in_focus) {
                        that.zs_elements.$wrapper.removeClass('zs-focus');
                        that.zs_elements.$wrapper.parent().removeClass('zs-focus');
                        that.in_focus = false;
                    }
                    if (that.is_open &&
                        (!that.multiple || (that.multiple && that.options.multiple.drop))) {
                        that.trigger('close');
                    }
                }
            },
            focus_prev, focus_skip, focus_prev_filter, focus_match,
            focus_filter_timer, character, cur_index;

        function hotTyping(e) {
            focus_prev = focus_prev_filter || "";
            character = String.fromCharCode(e.keyCode);
            focus_skip = false;

            clearTimeout(focus_filter_timer);

            if (character === focus_prev) {
                focus_skip = true;
            } else {
                character = focus_prev + character;
            }

            cur_index = that.$options.index(that.current.$option);
            focus_match = that._eventsFilterItems(character);
            focus_match = focus_skip &&
                that.current.$option &&
                focus_match.index(
                    that.$options.eq(cur_index + 1)
                ) !== -1 ?
                that.$options.filter(function(id) {
                    return id > cur_index;
                }) : focus_match;

            // If no matches on the current filter, reset to the last character pressed
            // to move down the menu to the first item that starts with that character
            if (!focus_match.length) {
                character   = String.fromCharCode(e.keyCode);
                focus_match = that._eventsFilterItems(character);
            }

            if (focus_match.length) {
                that._focusItem(focus_match);
                focus_prev_filter = character;
                focus_filter_timer = setTimeout(function() {
                    focus_prev_filter = false;
                }, 1000);
            } else {
                focus_prev_filter = false;
            }
        }

        if (this.utilities.touch_enable && $.Finger) {

        } else {
            if (that.multiple) {
                wrapper_events.keydown = function(e) {
                    var prevent_default = true,
                        $new_option, focus_index, point_index, first_index, last_index,
                        new_option_data, tmp_i, $tmp_option, tmp_data, tmp_max;

                    if (!that.is_enable) {
                        return;
                    }

                    switch (e.keyCode) {
                        case that.utilities.keyCode.ENTER:
                            if (/*!that.options.native_menu && */that.is_open && that.options.multiple.drop) {
                                that.trigger('close');
                            }
                            prevent_default = false;
                            break;
                        case that.utilities.keyCode.ESCAPE:
                            if (/*!that.options.native_menu && */!that.is_open && that.options.multiple.drop) {
                                that.trigger('close');
                            }
                            prevent_default = false;
                            break;
                        case that.utilities.keyCode.LEFT:
                        case that.utilities.keyCode.UP:
                            if (e.altKey) {
                                if (/*!that.options.native_menu && */that.is_open &&
                                    that.options.multiple.drop && e.keyCode !== that.utilities.keyCode.LEFT) {
                                    that.trigger('close');
                                }
                            } else {
                                if (that.current.$option === false) {
                                    $new_option     = that.$options.eq(0);
                                    new_option_data = $new_option.data('zs_data');
                                    if (new_option_data && new_option_data.enable) {
                                        that.current.$option_focus = $new_option;
                                        that.trigger('setItem', $new_option);
                                    }
                                } else {
                                    focus_index = that.$options.index(that.current.$option_focus);
                                    point_index = that.$options.index(that.current.$option_point);
                                    if (e.shiftKey && !e.ctrlKey) {
                                        if (focus_index <= point_index && focus_index !== 0) {
                                            that.trigger(
                                                'setItem',
                                                that.$options.filter(function(id) {
                                                    var $self = $(this),
                                                        my_data = $self.data('zs_data');
                                                    return id >= focus_index - 1 && id <= point_index &&
                                                        my_data && my_data.enable;
                                                }),
                                                { multi_shift: true }
                                            );
                                        }
                                        if (focus_index > point_index) {
                                            that.trigger(
                                                'setItem',
                                                that.$options.filter(function(id) {
                                                    var $self = $(this),
                                                        my_data = $self.data('zs_data');

                                                    return id >= point_index && id <= focus_index - 1 &&
                                                        my_data && my_data.enable;
                                                }),
                                                { multi_shift: true }
                                            );
                                        }
                                    }
                                    if (e.shiftKey && e.ctrlKey) {
                                        first_index = that.$options.index(that.current.$option.eq(0));
                                        if (focus_index <= first_index && focus_index !== 0) {
                                            last_index = that.$options.index(that.current.$option.eq(-1));
                                            that.trigger(
                                                'setItem',
                                                that.$options.filter(function(id) {
                                                    var $self = $(this),
                                                        my_data = $self.data('zs_data');

                                                    return id >= focus_index - 1 && id <= last_index &&
                                                        my_data && my_data.enable;
                                                })
                                            );
                                        }
                                    }
                                    if (focus_index !== 0 &&
                                        ((!e.shiftKey && !e.ctrlKey) || (!e.shiftKey && e.ctrlKey))) {
                                        that.trigger('setPrev');
                                    } else {
                                        if (focus_index !== 0) {
                                            that.current.$option_focus = that.$options.eq(focus_index - 1);
                                        }
                                    }
                                }
                            }
                            break;
                        case that.utilities.keyCode.RIGHT:
                        case that.utilities.keyCode.DOWN:
                            if (e.altKey) {
                                if (/*!that.options.native_menu && */!that.is_open &&
                                    that.options.multiple.drop && e.keyCode !== that.utilities.keyCode.RIGHT) {
                                    that.trigger('open');
                                }
                            } else {
                                if (that.current.$option === false) {
                                    $new_option                = that.$options.eq(0);
                                    new_option_data = $new_option.data('zs_data');
                                    if (new_option_data && new_option_data.enable) {
                                        that.current.$option_focus = $new_option;
                                        that.trigger('setItem', $new_option);
                                    }
                                } else {
                                    focus_index = that.$options.index(that.current.$option_focus);
                                    point_index = that.$options.index(that.current.$option_point);
                                    if (e.shiftKey && !e.ctrlKey) {
                                        if (focus_index >= point_index && focus_index !== that.$options.length - 1) {
                                            that.trigger(
                                                'setItem',
                                                that.$options.filter(function(id) {
                                                    var $self = $(this),
                                                        my_data = $self.data('zs_data');
                                                    return id >= point_index && id <= focus_index + 1 &&
                                                        my_data && my_data.enable;
                                                }),
                                                { multi_shift: true }
                                            );
                                        }
                                        if (focus_index < point_index) {
                                            that.trigger(
                                                'setItem',
                                                that.$options.filter(function(id) {
                                                    var $self = $(this),
                                                        my_data = $self.data('zs_data');
                                                    return id >= focus_index + 1 && id <= point_index &&
                                                        my_data && my_data.enable;
                                                }),
                                                { multi_shift: true }
                                            );
                                        }
                                    }
                                    if (e.shiftKey && e.ctrlKey) {
                                        last_index = that.$options.index(that.current.$option.eq(-1));
                                        if (focus_index >= last_index && focus_index !== that.$options.length - 1) {
                                            first_index = that.$options.index(that.current.$option.eq(0));
                                            that.trigger(
                                                'setItem',
                                                that.$options.filter(function(id) {
                                                    var $self = $(this),
                                                        my_data = $self.data('zs_data');
                                                    return id >= first_index && id <= focus_index + 1 &&
                                                        my_data && my_data.enable;
                                                })
                                            );
                                        }
                                    }
                                    if (focus_index !== that.$options.length - 1 &&
                                        ((!e.shiftKey && !e.ctrlKey) || (!e.shiftKey && e.ctrlKey))) {
                                        that.trigger('setNext');
                                    } else {
                                        if (focus_index !== that.$options.length - 1) {
                                            that.current.$option_focus = that.$options.eq(focus_index + 1);
                                        }
                                    }
                                }
                            }
                            break;
                        case that.utilities.keyCode.HOME:
                        case that.utilities.keyCode.PAGE_UP:
                            for (tmp_i = 0; tmp_i < that.$options.length - 1; tmp_i++) {
                                $tmp_option = that.$options.eq(tmp_i);
                                tmp_data    = $tmp_option.data('zs_data');
                                if (tmp_data && tmp_data.enable) {
                                    that.trigger('setItem', $tmp_option);
                                    that.current.$option_focus = $tmp_option;
                                    break;
                                }
                            }
                            break;
                        case that.utilities.keyCode.END:
                        case that.utilities.keyCode.PAGE_DOWN:
                            for (tmp_max = that.$options.length; tmp_max--;) {
                                $tmp_option = that.$options.eq(tmp_max);
                                tmp_data = $tmp_option.data('zs_data');
                                if (tmp_data && tmp_data.enable) {
                                    that.trigger('setItem', $tmp_option);
                                    that.current.$option_focus = $tmp_option;
                                    break;
                                }
                            }
                            break;
                        default :
                            prevent_default = false;
                            if (!that.options.native_menu &&
                                (!that.options.multiple.drop ||
                                    (that.options.multiple.drop && that.is_open))) {
                                hotTyping(e);
                            }
                    }

                    if (prevent_default) {
                        e.preventDefault();
                    }
                };
            } else {
                wrapper_events.keydown = function(e) {
                    var prevent_default = true,
                        tmp_i, $tmp_option, tmp_data, tmp_max;

                    if (!that.is_enable) {
                        return;
                    }
                    switch (e.keyCode) {
                        case that.utilities.keyCode.ENTER:
                            if (!that.options.native_menu && that.is_open) {
                                if (that.focus_items.$options) {
                                    that.trigger('setItem', that.focus_items.$options.eq(0));
                                }
                                that.trigger('close');
                            }
                            prevent_default = false;
                            break;
                        case that.utilities.keyCode.ESCAPE:
                            if (!that.options.native_menu) {
                                that.trigger('close');
                            }
                            prevent_default = false;
                            break;
                        case that.utilities.keyCode.UP:
                            if (e.altKey) {
                                if (!that.options.native_menu && that.is_open) {
                                    that.trigger('close');
                                }
                            } else {
                                if (that.focus_items.$options) {
                                    that.trigger('setItem', that.focus_items.$option);
                                    that._blurFocusItem();
                                }
                                that.trigger('setPrev');
                            }
                            break;
                        case that.utilities.keyCode.DOWN:
                            if (e.altKey) {
                                if (!that.options.native_menu && !that.is_open) {
                                    that.trigger('open');
                                }
                            } else {
                                if (that.focus_items.$options) {
                                    that.trigger('setItem', that.focus_items.$option);
                                    that._blurFocusItem();
                                }
                                that.trigger('setNext');
                            }
                            break;
                        case that.utilities.keyCode.LEFT:
                            that.trigger('setPrev');
                            break;
                        case that.utilities.keyCode.RIGHT:
                            that.trigger('setNext');
                            break;
                        case that.utilities.keyCode.HOME:
                        case that.utilities.keyCode.PAGE_UP:
                            for (tmp_i = 0; tmp_i < that.$options.length - 1; tmp_i++) {
                                $tmp_option = that.$options.eq(tmp_i);
                                tmp_data    = $tmp_option.data('zs_data');
                                if (tmp_data && tmp_data.enable) {
                                    that.trigger('setItem', $tmp_option);
                                    break;
                                }
                            }
                            break;
                        case that.utilities.keyCode.END:
                        case that.utilities.keyCode.PAGE_DOWN:
                            for (tmp_max = that.$options.length; tmp_max--;) {
                                $tmp_option = that.$options.eq(tmp_max);
                                tmp_data = $tmp_option.data('zs_data');
                                if (tmp_data && tmp_data.enable) {
                                    that.trigger('setItem', $tmp_option);
                                    break;
                                }
                            }
                            break;
                        default :
                            prevent_default = false;
                            if (that.is_open) {
                                hotTyping(e);
                            }
                    }

                    if (prevent_default) {
                        e.preventDefault();
                    }
                };
            }
        }

        this.zs_elements.$wrapper.on(wrapper_events);
    };

    Zs.prototype._eventsBtnsInit = function() {
        var that        = this,
            btns_events = {},
            timeout_id  = false;

        if (this.utilities.touch_enable && $.Finger) {
            btns_events['tap.zselect'] = function() {
                if (!that.is_enable) {
                    return;
                }
                if (timeout_id) {
                    clearTimeout(timeout_id);
                    timeout_id = false;
                }
                timeout_id = setTimeout(function() {
                    if (that.is_open) {
                        that.trigger('close');
                    } else {
                        that.trigger('open');
                    }
                }, 30);
            };
        } else {
            btns_events.mousedown = function() {
                if (!that.is_enable) {
                    return;
                }
                if (that.is_open) {
                    that.trigger('close');
                } else {
                    that.trigger('open');
                }
            };
        }

        if (this.zs_elements.$select_text &&
            this.zs_elements.$select_text.length) {
            this.zs_elements.$select_text.on(btns_events);
        }
        if (this.zs_elements.$select_btn &&
            this.zs_elements.$select_btn.length) {
            this.zs_elements.$select_btn.on(btns_events);
        }
    };

    Zs.prototype._eventsDropItem = function($drop_item, $option) {
        var that   = this,
            events = {};

        function eventSetDropItemSingle() {
            var drop_data = $option.data('zs_data');
            if (!that.is_enable || !drop_data || !drop_data.enable) {
                return;
            }
            that.trigger('setItem', $option);
            that.trigger('close');
        }

        if (this.multiple) {
            if (this.utilities.touch_enable && $.Finger) {
                events['tap.zselect'] = function() {
                    var drop_data = $option.data('zs_data'),
                        my_index;

                    if (!that.is_enable || !drop_data || !drop_data.enable) {
                        return;
                    }

                    if (that.current.$option) {
                        if (that.current.$option.index($option) === -1) {
                            that.trigger('setItem', that.current.$option.add($option));
                            that.current.$drop_item_point = $drop_item;
                            that.current.$option_point    = $option;
                        } else {
                            my_index = that.current.$option.index($option);

                            if (that.current.$option.length === 1) {
                                $option.removeAttr('selected').prop('selected', false);
                                that.trigger('setItem');
                                that.current.$option    = false;
                                that.current.$drop_item = false;
                            } else {
                                that.trigger('setItem', that.current.$option.filter(function(id) {
                                    var $self = $(this),
                                        my_data = $self.data('zs_data');
                                    return id !== my_index &&
                                        my_data && my_data.enable;
                                }));
                            }
                        }
                        return;
                    }

                    that.trigger('setItem', $option);
                };
            } else {
                events.mouseup = function(e) {
                    var drop_data = $option.data('zs_data'),
                        my_index, item_point_index,
                        cur_first_index, cur_last_index;

                    if (!that.is_enable || !drop_data || !drop_data.enable) {
                        return;
                    }

                    that.current.$option_focus = $option;

                    if (e.ctrlKey && !e.shiftKey && that.current.$option !== false) {
                        if (that.current.$option.index($option) === -1) {
                            that.trigger('setItem', that.current.$option.add($option));
                            that.current.$drop_item_point = $drop_item;
                            that.current.$option_point    = $option;
                        } else {
                            my_index = that.current.$option.index($option);

                            if (that.current.$option.length === 1) {
                                $option.removeAttr('selected').prop('selected', false);
                                that.trigger('setItem');
                                that.current.$option    = false;
                                that.current.$drop_item = false;
                            } else {
                                that.trigger('setItem', that.current.$option.filter(function(id) {
                                    var $self = $(this),
                                        my_data = $self.data('zs_data');
                                    return id !== my_index &&
                                        my_data && my_data.enable;
                                }));
                            }
                        }
                        return;
                    }
                    if (e.shiftKey && !e.ctrlKey && that.current.$option !== false) {
                        if (that.current.$drop_item_point === false) {
                            that.trigger('setItem', $option);
                        } else {
                            my_index           = that.$options.index($option);
                            item_point_index   = that.$options.index(that.current.$option_point);

                            if (my_index < item_point_index) {
                                that.trigger(
                                    'setItem',
                                    that.$options.filter(function(id) {
                                        var $self = $(this),
                                            my_data = $self.data('zs_data');
                                        return id >= my_index && id <= item_point_index &&
                                            my_data && my_data.enable;
                                    }),
                                    { multi_shift: true }
                                );
                            }
                            if (my_index > item_point_index) {
                                that.trigger(
                                    'setItem',
                                    that.$options.filter(function(id) {
                                        var $self = $(this),
                                            my_data = $self.data('zs_data');
                                        return id >= item_point_index && id <= my_index &&
                                            my_data && my_data.enable;
                                    }),
                                    { multi_shift: true }
                                );
                            }
                            if (my_index === item_point_index) {
                                that.trigger(
                                    'setItem',
                                    $option,
                                    { multi_shift: true }
                                );
                            }
                        }
                        return;
                    }
                    if (e.shiftKey && e.ctrlKey && that.current.$option !== false) {
                        my_index = that.$options.index($option);
                        cur_first_index = that.$options.index(that.current.$option.eq(0));
                        cur_last_index  = that.$options.index(that.current.$option.eq(-1));

                        if (my_index >= cur_first_index && my_index <= cur_last_index) {
                            that.trigger(
                                'setItem',
                                that.$options.filter(function(id) {
                                    var $self = $(this),
                                        my_data = $self.data('zs_data');
                                    return id >= cur_first_index && id <= cur_last_index &&
                                        my_data && my_data.enable;
                                })
                            );
                        }
                        if (my_index < cur_first_index) {
                            that.trigger(
                                'setItem',
                                that.$options.filter(function(id) {
                                    var $self = $(this),
                                        my_data = $self.data('zs_data');
                                    return id >= my_index && id <= cur_last_index &&
                                        my_data && my_data.enable;
                                })
                            );
                        }
                        if (my_index > cur_last_index) {
                            that.trigger(
                                'setItem',
                                that.$options.filter(function(id) {
                                    var $self = $(this),
                                        my_data = $self.data('zs_data');
                                    return id >= cur_first_index && id <= my_index &&
                                        my_data && my_data.enable;
                                })
                            );
                        }
                        return;
                    }

                    that.trigger('setItem', $option);
                    that.current.$drop_item_point = $drop_item;
                    that.current.$option_point    = $option;
                };
            }
        } else {
            if (this.utilities.touch_enable) {
                if ($.Finger) {
                    events['tap.zselect'] = eventSetDropItemSingle;
                } else {
                    events.click = eventSetDropItemSingle;
                }
            } else {
                events.mouseup = eventSetDropItemSingle;
            }
        }

        $drop_item.on(events);
    };

    Zs.prototype._getSelectText = function($option) {
        var text = '';

        if (typeof this.options.buildSelectText === 'function') {
            text = this.options.buildSelectText($option);
        } else {
            if (this.multiple &&
                this.zs_elements.$select_text && this.zs_elements.$select_text.length) {
                if ($option.length === 1) {
                    text = $option.text();
                }
                if ($option.length > 1) {
                    text = $option.length + ' Items';
                }
                if ($option.length === 0) {
                    text = this.options.placeholder.no_options;
                }
            } else {
                text = $option.eq(0).text();
            }
        }

        return text;
    };

    Zs.prototype._focusItem = function($options) {
        var that = this,
            $drop_focus;
        if (this.focus_items.$options) {
            this.focus_items.$drop_items.removeClass('zs-item-focus');
        }

        $options.each(function(id) {
            var $option = $(this),
                zs_data = $option.data('zs_data'),
                $drop_item = zs_data.$drop_item;

            if (id === 0) {
                that.focus_items.$drop_items = $drop_item;
                if (zs_data.enable) {
                    $drop_focus = $drop_item;
                    that._selectFocusDropItem($drop_item, $option);
                }
            } else {
                that.focus_items.$drop_items = that.focus_items.$drop_items.add($drop_item);
                if (!$drop_focus) {
                    $drop_focus = $drop_item;
                    that._selectFocusDropItem($drop_item, $option);
                }
            }
        });
        this.focus_items.$options = $options.eq(0);

    };

    Zs.prototype._selectFocusDropItem = function($drop_item, $option) {
        this.focus_items.$option = $option;
        $drop_item.addClass('zs-item-focus');
        this.zs_elements.$drop.scrollTop(
            $drop_item.position().top + this.zs_elements.$drop.scrollTop()
        );
    };

    Zs.prototype._blurFocusItem = function() {
        if (this.focus_items.$options) {
            this.focus_items.$options = false;
            this.focus_items.$option  = false;
            this.focus_items.$drop_items.removeClass('zs-item-focus');
            this.focus_items.$drop_items = false;
        }
    };

    Zs.prototype.setItem = function(ev, zs, option, data) {
        var that           = this,
            is_placeholder = false,
            fake_option    = false,
            no_options      = false,
            $my_option, my_data, my_text;

        // check if event triggered from here
        if (this.is_change_locked === true) {
            this.is_change_locked = false;
            return;
        }

        // get needed option
        if (option) {
            $my_option = this.$select.find(option);
        }
        if (option && $my_option.length) {
            this.$options.filter(':selected')
                .removeAttr('selected')
                .prop('selected', false);

            if (this.multiple) {
                $my_option.prop('selected', true);
            } else {
                $my_option.eq(0).prop('selected', true);
            }

            this.is_change_locked = true;
            if (check_prototype && this.orig_id) {
                window.$(this.orig_id).simulate('change');
            } else {
                this.$select.trigger('change', [$my_option]);
            }
            this.is_change_locked = false;
        } else {
            $my_option = this.$options.filter(':selected');
        }

        // remove active class from active elements
        if (this.zs_elements.$drop_items && this.zs_elements.$drop_items.length) {
            this.zs_elements.$drop_items.filter('.zs-active').removeClass('zs-active');
        }

        if (!$my_option.length) {
            if (this.$option_placeholder && this.$option_placeholder.length) {
                $my_option = this.$option_placeholder;
            } else {
                no_options = true;
            }
            fake_option = true;
        }

        // set select text
        if (this.zs_elements.$select_text) {
            my_text = this._getSelectText($my_option, no_options);

            this.zs_elements.$select_text.html(my_text);
        }

        if (this.zs_elements.$wrapper.hasClass('zs-placeholder-active')) {
            this.zs_elements.$wrapper.removeClass('zs-placeholder-active');
        }

        if (!fake_option) {
            if (this.multiple) {
                this.current.$option    = $my_option;
                if (this.zs_elements.$drop_items && this.zs_elements.$drop_items.length) {
                    this.current.$drop_item = $();
                }
                $my_option.each(function() {
                    var $temp_item;

                    my_data = $(this).data('zs_data');
                    if (my_data) {
                        if (that.zs_elements.$drop_items && that.zs_elements.$drop_items.length) {
                            my_data.$drop_item
                                .addClass('zs-active');

                            $temp_item              = that.current.$drop_item;
                            that.current.$drop_item = $temp_item.add(my_data.$drop_item);
                        }
                        if (my_data.is_placeholder) {
                            is_placeholder = true;
                        }
                    }
                });
                if ((!data || !data.multi_shift) && that.zs_elements.$drop_items && that.zs_elements.$drop_items.length) {
                    this.current.$drop_item_point = that.current.$drop_item.eq(-1);
                    this.current.$option_point    = that.current.$option.eq(-1);
                }
            } else {
                $my_option = $my_option.eq(0);
                my_data    = $my_option.data('zs_data');
                if (my_data && my_data.$drop_item) {
                    my_data.$drop_item
                        .addClass('zs-active');
                    this.current.$drop_item = my_data.$drop_item;
                }
                if (my_data && my_data.is_placeholder) {
                    is_placeholder = true;
                }
                this.current.$option = $my_option;
            }
        }
        if (is_placeholder && $my_option.length === 1 || fake_option) {
            this.zs_elements.$wrapper.addClass('zs-placeholder-active');
        }

        this.trigger('setItemAfter');
    };

    Zs.prototype.setPrev = function() {
        var current_index = this.current.$option ?
                this.$options.index(this.current.$option) : 1,
            tmp_max, tmp_data, $tmp_option;

        if (current_index) {
            tmp_max = current_index;
            for (; tmp_max--;) {
                $tmp_option = this.$options.eq(tmp_max);
                tmp_data = $tmp_option.data('zs_data');
                if (tmp_data && tmp_data.enable) {
                    this.trigger('setItem', $tmp_option);
                    if (this.multiple) {
                        this.current.$option_focus = $tmp_option;
                    }
                    break;
                }
            }
        }
    };

    Zs.prototype.setNext = function() {
        var current_index = this.current.$option ?
                this.$options.index(this.current.$option) : -1,
            tmp_i, tmp_data, $tmp_option;

        if (current_index < this.$options.length - 1) {
            for (tmp_i = current_index; tmp_i < this.$options.length - 1; tmp_i++) {
                $tmp_option = this.$options.eq(tmp_i + 1);
                tmp_data    = $tmp_option.data('zs_data');
                if (tmp_data && tmp_data.enable) {
                    this.trigger('setItem', $tmp_option);
                    if (this.multiple) {
                        this.current.$option_focus = $tmp_option;
                    }
                    break;
                }
            }
        }
    };

    Zs.prototype.open = function() {
        if (this.is_open) {
            return;
        }

        var gen_top_w, gen_top_d, height_d, off_pos_d;

        this.zs_elements.$wrapper.addClass('zs-open');

        // check drop menu for position
        if (this.options.open_top && this.zs_elements.$drop && this.zs_elements.$drop.length) {
            if (this.utilities.$window[0].innerHeight) {
                gen_top_w = this.utilities.$window[0].innerHeight + this.utilities.$window.scrollTop();
            } else {
                gen_top_w = this.utilities.$window.height() + this.utilities.$window.scrollTop();
            }
            height_d  = this.zs_elements.$drop.outerHeight(true);
            off_pos_d = this.zs_elements.$drop.offset().top;
            gen_top_d = off_pos_d + height_d;
            if (gen_top_w < gen_top_d && off_pos_d - height_d >= 0) {
                this.zs_elements.$wrapper.addClass('zs-open-top');
            }
        }

        this.is_open = true;

        this.trigger('openAfter');
    };

    Zs.prototype.close = function() {
        if (!this.is_open) {
            return;
        }

        this.zs_elements.$wrapper.removeClass('zs-open');

        if (this.zs_elements.$wrapper.hasClass('zs-open-top')) {
            this.zs_elements.$wrapper.removeClass('zs-open-top');
        }

        this._blurFocusItem();

        this.is_open = false;
        this.trigger('closeAfter');
    };

    Zs.prototype.refresh = function() {
        this.trigger('destroy');
        if (this.lazy_timer_id !== false) {
            clearTimeout(this.lazy_timer_id);
            this.lazy_timer_id = false;
        }
        if (!this.$select.data('zs_data')) {
            this.$select.data('zs_data', new Zs(this.$select, this.options));
        }
    };

    Zs.prototype.enable = function() {
        if (this.is_enable) {
            return;
        }
        this.is_enable = true;
        if (this.$select.attr('disabled')) {
            this.$select.removeAttr('disabled')
        }
        this.zs_elements.$wrapper.removeClass('zs-disabled');
    };

    Zs.prototype.disable = function() {
        if (!this.is_enable) {
            return;
        }
        this.is_enable = false;
        if (this.is_open && (this.multiple && !this.options.multiple.drop)) {
            this.trigger('close');
        }
        if (!this.$select.attr('disabled')) {
            this.$select.attr('disabled', true);
        }
        this.zs_elements.$wrapper.addClass('zs-disabled');
    };

    Zs.prototype.destroy = function() {
        var select_data = this.$select.data('zs_data');
        if (!select_data) {
            return;
        }

        $.each(this.plugins, $.proxy(function(key, plugin) {
            if (plugin.destroy) {
                plugin.destroy();
            }
        }, this));

        this.utilities.$document.off('.zselect' + this.select_id);

        this.$options.removeData('zs_data');
        this.$select
            .insertBefore(this.zs_elements.$wrapper)
            .off('.zselect')
            .removeData('zs_data')
            .attr('tabindex', this.zs_elements.$wrapper.attr('tabindex'));

        this.zs_elements.$wrapper.remove();
    };

    $.fn.zselect = function(options) {
        return this.each(function() {
            var $self = $(this);
            if (!$self.is('select')) {
                return;
            }
            if (!$self.data('zs_data')) {
                $self.data('zs_data', new Zs(this, options));
            }
        });
    };

    $.fn.zselect.Constructor = Zs;
})(jQuery);
//# sourceMappingURL=data:application/json;base64,
